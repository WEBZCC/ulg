ULG - Universal Looking Glass
by CZ.NIC, z.s.p.o, Tomas Hlavacek, 2018


Design
======

The Looking Glass Web Application is based on Genshi library taking care of HTML templates, PExpect for interacting with the routers and providing abstraction layer for processing router output and feeding it to the Genshi engine.

The abstraction layer
---------------------

    PersistentStorage - utility for preserving results across the HTTP transactions

    Router - abstraction for communicating with and web representation of a router 
      LocalRouter - locally running Linux-based routing daemon representation
      RemoteRouter - remotely accessed (over SSH/Telnet/...) router

    TableDecorator - abstraction for processing output from the router generated by a command
    TextCommand - command constructed from the plain string and resulting in text dump (if no decorators are given)
      AnyCommand - abstract command constructed from the parameter objects and decorators

    TextParameter - abstract parameter for the AnyCommand, the parameter object validates the input values and renders proper parameter prompt in the web interface
        AddressParameter - abstract parameter for IP address
            IPv4AddressParameter
            IPv4SubnetParameter
            IPv6AddressParameter
            IPv64AddressParameter
            IPv6SubnetParameter
        SelectionParameter - abstract parameter for drop-down selection menu
            CommonSelectionParameter - parameter for drop-drow selection created from a list of options


The second desing block are the modules supporting interaction with the routers: ulgcisco for Cisco IOS routers, ulgciscoxr for IOS XR, ulgjuniper for JunOS and ulgbird for BIRD routing daemon running locally or remotely and ulglinux for executing (remotely or locally) arbitrary commands, on a Linux machine.

Router classes basically use the Command clasesses to generate the HTML prompt for the specific command, format the command that the Router object can dispatch to the router, collect results and pass the results to the decorator in the Command object to transform it to the HTML tables and so on.

Structure of ulgbird module
---------------------------

    BirdRouter - abstract BIRD router object, not to be used in the config, the place to implement all the router interaction and command parsing
      BirdRouterLocal (+ulgmodel.LocalRouter) - object to be used in the config and to implement specific way to access locally running BIRD
      BirdRouterRemote (+ulgmodel.RemoteRouter) - object to be used in the config and to implement specific way to access BIRD over SSH

/ulgmodel.TextCommand/
    AbstractBGPPeerSelectCommand - the command that has a drop-down menu for peer selection, needs pre-processing on the Router object side to have a list of peers ready beforehand (a process is needed to run ulg-cron.py on regular basis to prepare the list accordingly)
      BirdShowProtocolsAllCommand - the particular command that can be constructed into HTML prompt form and later to the command to be executed on the router from both the predetermined configutarion and the periodically renewed data from the router
      BirdShowRouteExportCommand - the particular command notable for the decorators that can parse the export and provide better view on it

    AbstractRouteTableCommand - abstract command for displaying routing table content
        BirdShowRouteCommand - particular command for BIRD inheriting both the ability to reuse data from the periodically renewed data from the router and the common facility for displaying routing table content
            BirdShowRouteProtocolCommand - more specific version of the previous command

    BirdGraphShowRouteAll - graph (GrpahViz-based) view on the routing table, in fact it is a specialized decorator

(Other classes defined un ulgbird are just a special cases of the former ones.)

Structure of ulgcisco module
----------------------------

  /ulgmodel.RemoteRouter/
    CiscoRouter - object to be used in the config and to implement specific way to access Cisco over SSH

  /ulgmodel.TextCommand/
    CiscoCommandBgpIPv46Sum - abstract command for displaying prompt and decorating results of "show bgp <ipv4|ipv6> sum" commands
      CiscoCommandBgpIPv4Sum - specific version for IPv4
      CiscoCommandBgpIPv6Sum - specific vestion for IPv6

    CiscoCommandGraphShowBgpIPv46Uni - abstract command for displaying prompt and decorating results of the respective command
        CiscoCommandGraphShowBgpIPv4Uni - specific version for the AFI
        CiscoCommandGraphShowBgpIPv6Uni - specific version for the AFI

    CiscoCommandShowBgpIPv46Select - abstract command for displaying prompt and decorating results of the respective command
        CiscoCommandShowBgpIPv4NeighAdv - specific version for the AFI
        CiscoCommandShowBgpIPv4NeighRecv - specific version for the AFI
        CiscoCommandShowBgpIPv6NeighAdv - specific version for the AFI
        CiscoCommandShowBgpIPv6NeighRecv - specific version for the AFI

    CiscoCommandShowBgpIPv4Neigh - command object for displaying prompt and decorating results of the respective command
    CiscoCommandShowBgpIPv6Neigh - command object for displaying prompt and decorating results of the respective command
    CiscoShowBgpIPv46Uni - abstract command for displaying prompt and decorating results of the respective command
        CiscoShowBgpIPv4Uni - specific version for the AFI
        CiscoShowBgpIPv6Uni - specific version for the AFI

Structure of ulg.py (web engine)
--------------------------------


  Session - class implementing session abstraction allowing for easy save & retreive session data
  DecoratorHelper - class implementing common functionality and abstraction for the output decorators (to make text output from the router to become a reasonably formatted HTML)
  ULGCgi - the main class used as the entry point for the CGI

config.py file is imported and needed by the ulg.py for the CGI entry point to be able to run and generate index page, that contains the prompt for command (neededing at least the list of routers contained in the configuration in form of a list of BirdRouter/CiscoRouter/... objects along with their configuration).

whois.py
--------

It is a supporting CGI script for running whois binary - on demand, that can come from web interface and there is an abstraction for building decorators that can access this CGI easily.


ulg-cron.py
-----------

This file has to be run periodically and once before the ULG web is accessed for the first time. It generates the list of peers from the routers (accoring to config.py) and saves them in persistent temporary storage for ULG to re-use for constructing the command prompts.


Deploying and extending ULG
===========================

config.py example
-----------------

from ulgcisco import * # CiscoRouter object can be used
from ulgbird import * # BirdRouterLocal or BirdRouterRemote can be used

routers = [ # config.routers is the list accessed from many places in ulg.py and ulg-cron.py to construct commands, execute them on the routers and provide proper decorators for the outputs
    CiscoRouter(host='testrouter1.core.company.com', user='xyz', password='xyz', asn=1234), # ASN is needed for the decorators to work properly in "sh bgp ..."
    CiscoRouter(host='testrouter2.core.company.com', user='xyz', password='xyz', asn=2345, acl=['user1','user2']),
    BirdRouterLocal('/var/run/bird.ctl', asn=3456),
    BirdRouterRemote('host', 'user', 'password', asn=5678, name='Hostname Bird'), # in case SSH key is used for accessing the remote router, the password can be anything
    LinuxRouterLocal(), # pseudo-router for running arbitrary commands
    LinuxRouterRemote('host', 'user'), # the same, but interact over SSH
    ]


Extending ULG
-------------

The preferred way of adding extension to the existing code is to inherit the class that implements the most of the functionality needed for the new component and use this new class in config. New commands can be created and used in the router class in the same way.
